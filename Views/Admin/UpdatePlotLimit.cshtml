@model IEnumerable<ODHDEVELOPERS.Models.PlotLimit>
@using ODHDEVELOPERS.Models;
@{
    UsersContext db = new UsersContext();
    var mr = db.Members.Single(m => m.Id == 1);
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "UpdatePlotLimit";
    var pagesize = (from r in db.PlotLimits select r).Count();
    var grid = new WebGrid(null,
             defaultSort: "",
             rowsPerPage: pagesize,
             selectionFieldName: "SearchString",
             ajaxUpdateContainerId: "agrid",
             sortFieldName: "SortColumn",
             sortDirectionFieldName: "SortOrder");
    grid.Bind(Model, autoSortAndPage: true, rowCount: pagesize);
    var a = 0;
}

<script type="text/javascript" >
    $(function () {
        $('.edit-mode').hide();
        $('.edit-user, .cancel-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            tr.find('.edit-mode, .display-mode').toggle();
        });

        $('.save-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            var projectid = tr.find("#projectid").html();
            var minvalue = tr.find("#minvalue").val();
            var maxvalue = tr.find("#maxvalue").val();
           
           
            tr.find("#lblminvalue").text(minvalue);
            tr.find("#lblmaxvalue").text(maxvalue);
            
            tr.find('.edit-mode, .display-mode').toggle();
            var Plan =
            {
                "projectid": projectid,
                "minvalue": minvalue,
                "maxvalue": maxvalue,
               
            };
            $.ajax({
                url: '/Admin/EditPlotLimit/',
                data: JSON.stringify(Plan),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    alert(data);
                }
            });

        });
    })
</script>  

<style type="text/css">
    .dd {
        height:50px;
        width:70%;
        float:left;
        font-family:'Arial Rounded MT';
        font-size:20px;
    }
    .d {
        height:50px;
        width:30%;
        float:left;
        font-family:'Arial Rounded MT';
        font-size:20px;
    }

</style>

<div class="page-content">

    <div class="container">

        <div class="page-toolbar">

            <div class="page-toolbar-block">
                <div class="page-toolbar-title">Edit Plot Limit</div>
                <div class="page-toolbar-subtitle"></div>
            </div>

            <div class="page-toolbar-block pull-right">
            </div>

        </div>

        <div class="row" style="width: 100%">
            <div class="col-md-6" style="width: 100%">

                <div class="block" style="width: 100%">
                    <div class="block-content controls">


                        @if (a == 0)
                        {  
                            <div id="comm">

                                <div id="gridContent" style="padding: 20px;">
                                    @grid.GetHtml(
        tableStyle: "webgrid-table",
        headerStyle: "webgrid-header",
        footerStyle: "webgrid-footer",
        alternatingRowStyle: "webgrid-alternating-row",
        selectedRowStyle: "webgrid-selected-row",
        rowStyle: "webgrid-row-style",
        mode: WebGridPagerModes.All,
        columns:
             grid.Columns(
             grid.Column("SN", format: @<text> <span class="display-mode" style="width: 20px;">@item.projectid </span>
                                    <label id="projectid" class="edit-mode" style="width: 20px;">@item.projectid</label>
                                    </text>, style: "col2Width" ), 
             grid.Column("Project Name", format: @<text> <span class="display-mode" style="width: 150px;">@item.projectname </span>
                                    <label id="projectname" class="edit-mode" style="width: 150px;">@item.projectname</label>
                                    </text>, style: "col2Width" ), 
             grid.Column("minvalue", "Min Value", format: @<text> <span class="display-mode">
                 <label id="lblminvalue">@item.minvalue</label>
             </span>
                                    <input type="text" id="minvalue" value="@item.minvalue" class="edit-mode" style="width:100px;" />
                                    </text>, style: "col2Width"), 
             grid.Column("maxvalue", "Max Value", format: @<text> <span class="display-mode">
                 <label id="lblmaxvalue">@item.maxvalue</label>
             </span>
                                    <input type="text" id="maxvalue" value="@item.maxvalue" class="edit-mode" style="width:100px;" />
                                    </text>, style: "col2Width"),   
             grid.Column("Action", format: @<text>
                                    <button class="edit-user display-mode">Edit</button>
                                    <button class="save-user edit-mode">Save</button>
                                    <button class="cancel-user edit-mode">Cancel</button>
                                    </text>, style: "col3Width", canSort: false)
                    ))


                                </div>
                            </div>
                        }

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>